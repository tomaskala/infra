user www-data;
worker_processes auto;
pid /run/nginx.pid;
worker_rlimit_nofile 8192;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    include /etc/nginx/fastcgi.conf;

    # Disable directory listing.
    autoindex off;

    # Do not emit the nginx version on error pages.
    server_tokens off;

    # Default MIME type of a response.
    default_type application/octet-stream;

    # Log paths.
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Allow sending data between file descriptor directly in the kernel space.
    # Together with `tcp_nopush` and `tcp_nodelay` below, this setting ensures
    # that the packets are full before being sent to the client. When the last
    # (most likely not full) packet is reached, `tcp_nodelay` forces the socket
    # to be sent without waiting 200ms as specified by Nagle's algorithm.
    sendfile on;

    # Block sending data until the packet payload size reaches the MSS, equal
    # to the MTU (Maximum Transmission Unit) without the IP header size.
    tcp_nopush on;

    # TCP implements a mechanism that waits up to 200ms to avoid sending too
    # small packets; it waits for the payload to fill the packet capacity.
    # There is a very low chance that the served file fills a number of
    # packets exactly, which would introduce an unnecessary 200ms latency.
    tcp_nodelay on;

    # Define a zone called `one` sized 10MB and limit its processing rate to
    # 1 request per second per key, the key being the client's IP address.
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

    # When the rate is exceeded, additional requests are delayed until their
    # amount reaches 5, at which point 503 (Service Unavailable) is returned.
    # Works with `nginx-limit-req` in the fail2ban configuration.
    limit_req zone=one burst=5;

    # Allowed protocols and ciphers.
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;

    # Gzip Settings
    gzip on;
    gzip_comp_level 3;
    gzip_min_length 1000;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_http_version 1.1;
    gzip_vary on;

    # Setup static content caching.
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 4;
    open_file_cache_errors on;

    # Prevent long-waiting connections from wasting resources.
    keepalive_timeout 30s;
    keepalive_requests 30;
    send_timeout 30s;

    # Virtual Host Configs
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
