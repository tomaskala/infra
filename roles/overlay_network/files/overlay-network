#!/bin/sh
set -eufx

usage="Usage: $(basename "$0") [OPTIONS] COMMAND

Control the overlay network functionality.

Options:
  -h  Show this message and exit.

Commands:
  start  Set up the overlay network.
  stop   Tear down the overlay network."

gateway_config='/etc/wireguard/wg-gateway.conf'
network_config='/opt/overlay-network/overlay-network.json'
unbound_config='/etc/unbound/unbound.conf.d/overlay-network.conf'

die() {
  printf '%s\n' "$1" >&2
  exit 1
}

start() {
  # Add firewall entries.
  internal_subnet_ipv4=$(/usr/bin/jq -r '.networks.internal.subnet.ipv4' "${network_config}")
  /usr/sbin/nft "add element inet firewall vpn_internal_ipv4 { ${internal_subnet_ipv4} }"

  internal_subnet_ipv6=$(/usr/bin/jq -r '.networks.internal.subnet.ipv6' "${network_config}")
  /usr/sbin/nft "add element inet firewall vpn_internal_ipv6 { ${internal_subnet_ipv6} }"

  isolated_subnet_ipv4=$(/usr/bin/jq -r '.networks.isolated.subnet.ipv4' "${network_config}")
  /usr/sbin/nft "add element inet firewall vpn_isolated_ipv4 { ${isolated_subnet_ipv4} }"

  isolated_subnet_ipv6=$(/usr/bin/jq -r '.networks.isolated.subnet.ipv6' "${network_config}")
  /usr/sbin/nft "add element inet firewall vpn_isolated_ipv6 { ${isolated_subnet_ipv6} }"

  accessible_subnets_ipv4=$(/usr/bin/jq -r '[.locations[].subnet.ipv4] | join(",")' "${network_config}")
  /usr/sbin/nft "add element inet firewall vpn_accessible_ipv4 { ${accessible_subnets_ipv4} }"

  accessible_subnets_ipv6=$(/usr/bin/jq -r '[.locations[].subnet.ipv6] | join(",")' "${network_config}")
  /usr/sbin/nft "add element inet firewall vpn_accessible_ipv6 { ${accessible_subnets_ipv6} }"

  # Add local DNS records.
  {
    printf 'server:\n'
    /usr/bin/jq -r \
      '.locations[].dns[] | "    local-data: \"" + .name + ". " + .type + " " + .value + "\""' \
      "${network_config}"
  } > "${unbound_config}"
  /usr/bin/systemctl reload unbound.service

  # Start IP forwarding.
  /sbin/sysctl -w net.ipv4.ip_forward=1
  /sbin/sysctl -w net.ipv6.conf.all.forwarding=1

  # Add the gateway WireGuard configuration.
  if [ -f "${gateway_config}" ]; then
    /usr/bin/wg addconf wg0 "${gateway_config}"
  fi

	# Add IP routes.
  /usr/bin/jq -r '.locations[] | .subnet.ipv4' "${network_config}" \
    | while read -r subnet; do
			route="$(/usr/sbin/ip -4 route show dev wg0 match "${subnet}" 2> /dev/null)"
			if [ -z "${route}" ]; then
				/usr/sbin/ip -4 route add "${subnet}" dev wg0
			fi
		done

  /usr/bin/jq -r '.locations[] | .subnet.ipv6' "${network_config}" \
    | while read -r subnet; do
			route="$(/usr/sbin/ip -6 route show dev wg0 match "${subnet}" 2> /dev/null)"
			if [ -z "${route}" ]; then
				/usr/sbin/ip -6 route add "${subnet}" dev wg0
			fi
		done
}

stop() {
	# Remove IP routes.
  /usr/bin/jq -r '.locations[] | .subnet.ipv4' "${network_config}" \
    | while read -r subnet; do
			route="$(/usr/sbin/ip -4 route show dev wg0 match "${subnet}" 2> /dev/null)"
			if [ -n "${route}" ]; then
				/usr/sbin/ip -4 route del "${subnet}" dev wg0
			fi
		done

  /usr/bin/jq -r '.locations[] | .subnet.ipv6' "${network_config}" \
    | while read -r subnet; do
			route="$(/usr/sbin/ip -6 route show dev wg0 match "${subnet}" 2> /dev/null)"
			if [ -n "${route}" ]; then
				/usr/sbin/ip -6 route del "${subnet}" dev wg0
			fi
		done

  # Restore WireGuard configuration.
  (
    /usr/bin/mkfifo -m 0600 /etc/wireguard/wg.fifo
    /usr/bin/wg-quick strip wg0 > /etc/wireguard/wg.fifo &
    /usr/bin/wg setconf wg0 /etc/wireguard/wg.fifo
    /usr/bin/rm -f /etc/wireguard/wg.fifo
  )

  # Stop IP forwarding.
  /sbin/sysctl -w net.ipv4.ip_forward=0
  /sbin/sysctl -w net.ipv6.conf.all.forwarding=0

  # Remove local DNS records.
  /usr/bin/rm -f "${unbound_config}"
  /usr/bin/systemctl reload unbound.service

  # Flush firewall entries.
  /usr/sbin/nft flush set inet firewall vpn_internal_ipv4
  /usr/sbin/nft flush set inet firewall vpn_internal_ipv6
  /usr/sbin/nft flush set inet firewall vpn_isolated_ipv4
  /usr/sbin/nft flush set inet firewall vpn_isolated_ipv6
  /usr/sbin/nft flush set inet firewall vpn_accessible_ipv4
  /usr/sbin/nft flush set inet firewall vpn_accessible_ipv6
}

while getopts 'h' arg; do
  case "${arg}" in
    h) printf '%s\n' "${usage}"; exit 0 ;;
    *) die "${usage}" ;;
  esac
done

shift $((OPTIND - 1))

if [ "$#" -ne 1 ]; then
  die "${usage}"
fi

case "$1" in
  start) start ;;
  stop) stop ;;
  *) die "${usage}" ;;
esac
